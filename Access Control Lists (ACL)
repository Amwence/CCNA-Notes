Access control list- Access control lists (ACLs) perform packet filtering to control which packets move through a network and to where. The packet filtering provides security by helping to limit the network traffic, restrict the access of users and devices to a network, and prevent the traffic from leaving a network. IP access lists reduce the chance of spoofing and denial-of-service attacks and allow dynamic, temporary user-access through a firewall.

IP access lists can also be used for purposes other than security, such as bandwidth control, restrict the content of routing updates, redistribute routes, trigger dial-on-demand (DDR) calls, limit debug output, and identify or classify traffic for quality of service (QoS) features or what traffic to be encrypted when using a vpn. This module provides an overview of IP access lists.

Inbound and Outbound traffic is based on the port it is being acted upon. For example when making an ACL from a laptop going through a router, and to a server. The port that the laptop is connected to the router. Anything being sent from the laptop to that port would be inbound traffic, and anything coming out of that port to the pc would be outbound traffic. Same for the server side of this example. The port that the server directly connects to any traffic coming from the server into the router would be inbound, and anything being sent out of that port to the server would be outbound traffic. It is all based on the port you are putting the ACL on.

2 steps to implmenting ACLs
1. Create ACL in global configuration mode: access-list command
2. Apply inbound or outbound on an interface: access-group command
An ACL will have no effect until it is applied to an interface. 

ACL's are processed top down from the list, and at the end if there are no matches in the ACL for traffic it is dropped. At the end of ACL lists have an Implicit DENY ALL at the end of all ACLs, so you must have atleast one allow statement in an ACL or all traffic will be dropped. You can only have one ACL per interface, per direction, and per protcol. They get overwritten without warning. 

Standard ACL - Only check on source IP addresses and do not check on port numbers or individual protocols. Permits or denies entire protocol suite based on the source Ip address or source network. These usually should be placed as close to the destination as possible.

Extended ACL- Check on both the source and destination IP addresses. Allows you to permit or deny specific protocols, ports and applications. These usually should be placed as close to the source as possible.

Two methods to identify Standard and Extended ACLs
Numbered ACL- 1-99 and 1300-1999(expanded range) for standard IP ACLs
              100-199 and 2000-2699(expanded range) for Extended ACLs

Named ACL- Uses Alphanumeric characters, and are more descriptive.

Note- there is a 700-799 range for MAC address access list not covered in course, but may be something to look into later. 

Wildcard Masks:
A wildcard mask is the opposite of a subnet maks where it uses 1's for the network portion. Wildcard masks instead use 1's for the host portion of the address or the 0's in a binary representation of a subnet mask. So whereas a /24 subnet mask is 255.255.255.0, a wildcard for /24 would be 0.0.0.255.
You can calculate a wildcard mask by subtracting the subnet from 255.255.255.255. To match a specific host you would use 0.0.0.0 which is the same as a all 255 subnet mask or /32, and to match anything would be 0.0.0.0 255.255.255.255. To match a subnet you would use the wildcard mask example below to figure out what you would need and a network address; for example 10.1.1.0 0.0.0.255, which would match the entire 10.1.1.0/24 network.
so as in our /24 example
  255.255.255.255
- 255.255.255.0
--------------------
   0.0.0.255   
   
An interesting thing to note is that you can also use a wildcard mask to deteremine if two IP addresses are in the same subnet, identify IP addresses in a particular subnet, and Ip addresses that are Dicontiguous or not all grouped sequentially. 

Configuring Wildcard Masks for Specific IP ranges:

So for specific wild card masks would be the same as a /32 address, so it would be ip address followed by 255.255.255.255 , and for entire subnets it would be 255.255.255.255 subtracted by the subnet mask of the network you are tyring to block. For specific ranges on the other hand we would need a different method of finding our wildcard mask. You would take the address range and take the lowest address and apply the ip subnet mask that applies to that range to figure out the specific address wildcard mask. For example you want 192.168.0.10-192.168.0.16 blocked. You would choose a /29 subnet mask. The resulting range would be 192.168.0.10 0.0.0.7

Setting up ACL

(config)# access-list <number> {deny|permit|remark}
        example: access-list 1 permit 10.1.1.1 0.0.0.0 (sets a standard acl to permit 10.1.1.1 when applied to interface.)
                 access-list 1 remark allow traffic from 10.1.1.1 out of interface.
                 
        Deny- Denies traffic within ACL
        Permit- Permits traffic within ACL
        Remark- Sets a description for the ACL so you know what it's for if visiting it at a later date.
        
(config)# access-list {number|name} {deny|permit} <protocol> <source ip> <wildcard mask> [ports] <destination> [ports] [<options>]
        example: access-list 100 permit TCP 10.1.1.1 0.0.0.0  192.168.1.1 eq 80 (sets an extended acl to allow tcp http traffic from 10.1.1.1 to 192.168.1.1.we know its http traffic because of the equals port 80 command)
                
                access-list 100 deny ip 10.1.1.0 0.0.0.255 host 192.168.1.1 (sets an extended acl that will block any ip traffic coming from the 10.1.1.0/24 network to 192.168.1.1. Because there is a permit message before this one, only the http traffic of 10.1.1.1 address would be allowed through all other traffic is dropped.)

(config-if)ip access-group {number|name} {in|out} 
      example: access-group 100 out (sets access list 100 to be set for traffic coming our of port configured) 
               access-group 1 in (sets access list 1 to be set for traffic coming into port configured)
       
 

(config)#access-list {number|name} {deny|permit|remark} {hostname or ipaddress|any|host} {wildcard mask|log|ip address if host was used} (host allows for you to match a specific IP and not use a wildcard mask.)
    example: access-list 1 permit host 10.1.1.1
             access-list 1 permit 10.1.1.1 255.255.255.255
             access-list 1 deny any log (denies all other traffic, and logs dropped traffic. The implicit deny does not log anything.)
             
(config)#access-list {number|name} {deny|permit|remark} 
 

(config-int)#ip access-group {name|number} {in|out}
      example: ip access-group 1 in (this is the group you would assign to the interface and all ACL's tied to that group would be put on that interface. This is also what I was talking about before with the direction being applied to the port itself. The access list in this example would only apply to traffic coming into that port, so any end device sending traffic into the port to be distributed, whereas out would be any traffic going out of that port towards whatever endpoint/device is on the other end of the line.)

Setting access list on VTY lines:

(config)#access-list {number|word} {deny|permit} <ip address>
(config)#line vty 0 4
(config-if)#access-class {number|word} {in|out}

Troubleshooting/Show Commands:
show access-lists
show access-lists {number|name}
